#! /usr/bin/python3

import os
import sys
import time
import shutil
import argparse
import tempfile
import subprocess


def ensure_font(name):
	if name.encode('ascii') not in subprocess.run(['fc-match', name], stdout=subprocess.PIPE).stdout:
		print(f'Font "{name}" not found!')
		exit(1)
ensure_font('Candara')
ensure_font('Gentium Basic')


# Check if md doc is newer than pdf, and if so, compile it
def maybe_compile(md, imd, html, pdf):
	try:
		md_mtime = os.stat(md).st_mtime
	except FileNotFoundError:
		md_mtime = 0

	try:
		pdf_mtime = os.stat(pdf).st_mtime
	except FileNotFoundError:
		pdf_mtime = -1

	if md_mtime > pdf_mtime:
		compile(md_path, imd_path, html_path, pdf_path)


# Compile md doc into pdf
def compile(md, imd, html, pdf):
	try:
		shutil.copyfile(md, imd)
	except FileNotFoundError:
		with open(imd, 'w') as fd:
			pass

	print()
	print('Running pandoc')
	subprocess.run([
		'pandoc',
		'--from=markdown+yaml_metadata_block+smart+strikeout+link_attributes+raw_html',
		'--standalone',
		'--pdf-engine=wkhtmltopdf',
		'--to=html',
		'--variable=css:/home/marcelm/.mdf/style.css',
		'--output=' + html,
		imd,
	], stdout=sys.stdout, stderr=sys.stderr)

	print()
	print('Running wkhtmltopdf')
	subprocess.run([
		'wkhtmltopdf',
		'--enable-local-file-access',
		'-B', '10mm', '-T', '10mm', '-L', '10mm', '-R', '10mm',
		'-s', 'A4',
		html,
		pdf,
	], stdout=sys.stdout, stderr=sys.stderr)


# Arguments
parser = argparse.ArgumentParser(description='Render MarkDown document to a PDF.')
parser.add_argument('file', type=str, help='Input MarkDown file.')
args = parser.parse_args()


# Set up files
tmp_dir = tempfile.TemporaryDirectory(prefix='mdf.')
md_path = args.file
if not md_path.endswith('.md'):
	md_path += '.md'
pdf_path = os.path.splitext(md_path)[0] + '.pdf'
imd_path = f'{tmp_dir.name}/input.md'
html_path = f'{tmp_dir.name}/output.html'
log_path = f'{tmp_dir.name}/mdf.log'


# Fix stdout/err, log file
old_stdout = sys.stdout
old_stderr = sys.stderr
sys.stdout = open(log_path, 'w', buffering=1)
sys.stderr = sys.stdout


# Let's go
print(f'tmp_dir = {tmp_dir}')
maybe_compile(md_path, imd_path, html_path, pdf_path)
evince_process = subprocess.Popen(['evince', pdf_path], stdout=sys.stdout, stderr=sys.stderr)
vim_process = subprocess.Popen(['vim', md_path])

while vim_process.poll() is None:
	maybe_compile(md_path, imd_path, html_path, pdf_path)
	time.sleep(0.1)  # Yeah, polling :/
